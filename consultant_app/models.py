from __future__ import unicode_literalsfrom django.db import modelsfrom django.conf import settingsfrom datetime import datetimefrom django.contrib.auth.models import AbstractUserimport uuidfrom django.contrib.auth.models import PermissionsMixinfrom django import formsfrom django.utils import timezonefrom versatileimagefield.fields import VersatileImageField,PPOIFieldfrom simple_history.models import HistoricalRecordsfrom django.contrib.contenttypes.models import ContentTypefrom django.contrib.contenttypes.fields import GenericForeignKey# from geojson import Feature, loadsfrom django.contrib.postgres.fields import JSONFieldimport collectionsdef get_attachment_file_path(instance, filename):    """    Produces a unique file path for the upload_to of a FileField.        The produced path is of the form:        "[model name]/[field name]/[random name].[filename extension]".    """    new_filename = "%s.%s" % (uuid.uuid4(),                              filename.split('.')[-1])    return '/'.join([instance.__class__.__name__.lower(),                      filename])class User(AbstractUser):    RATING_CHOICES = (        ('active', 'ACTIVE'),        ('less_active', 'LESS_ACTIVE'),        ('independent', 'INDEPENDENT'),    )    ROLE_CHOICE=(        ('supporter', 'SUPPORTER'),        ('consultant','CONSULTANT'),    )    GENDER = (        ('male', 'Male'),        ('female', 'Female')    )    gender= models.CharField(choices=GENDER, max_length=10,null=True ,blank=True)    role= models.CharField(choices=ROLE_CHOICE, max_length=15,blank=True)    designation=models.CharField(max_length=225,null=True,blank=True)    employee_id = models.CharField(max_length=20, default=None, null=True)    skype_username = models.CharField(max_length=50, default=None, null=True)    mobile_no = models.CharField(max_length=10, null=True, blank=True, )    company_name = models.CharField(max_length=50, default=None, null=True,blank=True)    experience = models.CharField(max_length=5, default=None, null=True, blank =True)    status = models.CharField(choices=RATING_CHOICES, max_length=15,null=True, blank=True)    assigned_date= models.DateField(null=True, blank=True)    current_location = models.CharField(max_length=30, default=None, null=True, blank= True)    resume= models.FileField( upload_to=get_attachment_file_path, default=None, null=True)    # image=models.ImageField(upload_to=get_attachment_file_path,null=True,blank=True)    # image = ImageCropField(blank=True, null=True, upload_to=get_attachment_file_path)    # cropping = ImageRatioField('image', '430x360')    image = VersatileImageField('Image', upload_to=get_attachment_file_path, ppoi_field='image_ppoi', null=True,blank=True)    image_ppoi = PPOIField()    supporter = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='consultant')    log_out_time= models.DateTimeField(null=True,blank=True)    history = HistoricalRecords()    # def __str__(self):    #     return self.username    def save(self, *args, **kwargs):        super(User, self).save(*args, **kwargs)# class Activity(models.Model):#     FAVORITE = 'F'#     LIKE = 'L'#     UP_VOTE = 'U'#     DOWN_VOTE = 'D'#     ACTIVITY_TYPES = (#         (FAVORITE, 'Favorite'),#         (LIKE, 'Like'),#         (UP_VOTE, 'Up Vote'),#         (DOWN_VOTE, 'Down Vote'),#     )##     user = models.ForeignKey(User)#     activity_type = models.CharField(max_length=1, choices=ACTIVITY_TYPES)#     date = models.DateTimeField(auto_now_add=True)##     # Below the mandatory fields for generic relation#     content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)#     object_id = models.PositiveIntegerField()#     # content_object = GenericForeignKey()#     content_object = GenericForeignKey('content_type', 'object_id')##     def __str__(self):#         return 'Object_id- %s | %s' % (self.object_id,self.user.username)class Technology(models.Model):    technology= models.CharField(max_length=30)    def __str__(self):        return self.technologyclass Project(models.Model):    STATUS_CHOICE= (('going_on','GOING_ON'),                    ('project_co','PROJECT_COMPLETED'),                    ('contract_c','CONTRACT_COMPLETED'),                    ('contract_e','CONTRACT_EXTENDED'),                    ('fired','FIRED'),                    ('resigned', 'RESIGNED'))    title= models.CharField(max_length=30,unique=True)    description= models.CharField(max_length=2000,null=True,blank=True)    assigned_date= models.DateField(null=True, blank=True)    completion_date= models.DateField(null=True, blank=True)    join_date= models.DateField(null=True, blank=True)    technology= models.ForeignKey(Technology,null=True, blank=True)    consultant= models.ForeignKey(User, on_delete=models.CASCADE, related_name= 'project')    status= models.CharField(max_length= 10, choices= STATUS_CHOICE, default= 'pending')    # file=models.FileField(upload_to=get_attachment_file_path,null=True,blank=True)    history = HistoricalRecords()    def __str__(self):        return 'ID- %s | %s' % (self.id, self.title)class Comment(models.Model):    text=models.TextField(max_length=1000)    comment_time= models.DateTimeField(default=datetime.now)    project= models.ForeignKey(Project,related_name='comment')    supporter= models.ForeignKey(User,related_name='comment')    # reply= models.ForeignKey('self',null=True,blank=True)    def __str__(self):        return self.text# class Reply(models.Model):#     comment=models.ForeignKey(Comment,on_delete=models.CASCADE,related_name='reply')#     reply=models.CharField(max_length=225,null=True,blank=True,)#     reply_time= models.DateTimeField(default=datetime.now)#     supporter= models.ForeignKey(User, null=True, blank=True)class To_do_list(models.Model):    text=models.TextField()    user=models.ForeignKey(User,on_delete=models.CASCADE,related_name='to_do_list')    def __str__(self):        return self.textclass Notification(models.Model):    text = models.CharField(max_length=225)    recipient=models.ForeignKey(User,related_name='notification')    timestamp = models.DateTimeField(auto_now_add=True)    unread = models.BooleanField(default=True, blank=False)    comment = models.ForeignKey(Comment, null=True, blank=True, on_delete=models.CASCADE)    project = models.ForeignKey(Project, null=True, blank=True, on_delete=models.CASCADE)    send_by= models.ForeignKey(User, null=True,blank=True, related_name='Notification')    type=models.CharField(max_length=225)    def __str__(self):        return 'ID- %s | %s' % (self.id, self.text)class SkillSet(models.Model):    technology= models.ForeignKey(Technology,max_length=30)    pointer= models.IntegerField()    supporter= models.ForeignKey(User, related_name='skillset',on_delete=models.CASCADE)    # def __str__(self):    #     return self.supporter.usernameclass File(models.Model):    file=models.FileField(upload_to=get_attachment_file_path,null=True,blank=True)    project=models.ForeignKey(Project)class Bookmyshow(models.Model):    event_name= models.CharField(max_length=500, blank=True, null=True)    city_name= models.CharField(max_length=500, blank=True, null=True)    date_time=models.CharField(max_length=500, blank=True, null=True)    price_data=JSONField(blank=True, null=True, default=collections.OrderedDict())    venue=models.CharField(max_length=500, blank=True, null=True)    event_url=models.CharField(max_length=500, blank=True, null=True)    def __str__(self):        return self.event_urlclass Eventshigh(models.Model):    event_name= models.CharField(max_length=500, blank=True, null=True)    city_name= models.CharField(max_length=500, blank=True, null=True)    date_time=models.CharField(max_length=500, blank=True, null=True)    price_data=JSONField(blank=True, null=True, default=collections.OrderedDict())    venue=models.CharField(max_length=500, blank=True, null=True)    event_url=models.CharField(max_length=500, blank=True, null=True)    # class Meta:    #     print("evevevevvvvvvvvvvvvvvvv")    #     unique_together = ["event_name", "price_data"]    def __str__(self):        return self.event_nameclass Goeventz(models.Model):    event_name= models.CharField(max_length=500, blank=True, null=True)    city_name= models.CharField(max_length=500, blank=True, null=True)    date_time=models.CharField(max_length=500, blank=True, null=True)    price_data=JSONField(blank=True, null=True, default=collections.OrderedDict())    venue=models.CharField(max_length=500, blank=True, null=True)    event_url=models.CharField(max_length=500, blank=True, null=True)    def __str__(self):        return self.event_nameclass Insider(models.Model):    event_name= models.CharField(max_length=500, blank=True, null=True)    city_name= models.CharField(max_length=500, blank=True, null=True)    date_time=models.CharField(max_length=500, blank=True, null=True)    price_data=JSONField(blank=True, null=True, default=collections.OrderedDict())    venue=models.CharField(max_length=500, blank=True, null=True)    event_url=models.CharField(max_length=500, blank=True, null=True)    def __str__(self):        return self.event_nameclass Meraevents(models.Model):    event_name= models.CharField(max_length=500, blank=True, null=True)    city_name= models.CharField(max_length=500, blank=True, null=True)    date_time=models.CharField(max_length=500, blank=True, null=True)    price_data=JSONField(blank=True, null=True, default=collections.OrderedDict())    venue=models.CharField(max_length=500, blank=True, null=True)    event_url=models.CharField(max_length=500, blank=True, null=True)    def __str__(self):        return self.event_name# class Change(models.Model):# ##     project = models.ForeignKey(Project)#     changed_field = models.CharField("field_name")#     changed_data = models.TextField()  # you can improve this by storing the data in compressed format#     chaged_at = models.DateTimeField(default=timezone.now)#     status = models.CharField(max_length=10, choices=STATUS_CHOICE, default='pending')# ## # Below the mandatory fields for generic relation# ##     content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)#     object_id = models.PositiveIntegerField()#     # content_object = GenericForeignKey()#     content_object = GenericForeignKey('content_type', 'object_id')