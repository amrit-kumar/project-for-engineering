# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2017-05-12 06:41
from __future__ import unicode_literals

import consultant_app.models
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import versatileimagefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=10, null=True)),
                ('role', models.CharField(blank=True, choices=[('supporter', 'SUPPORTER'), ('consultant', 'CONSULTANT')], max_length=15)),
                ('designation', models.CharField(blank=True, max_length=225, null=True)),
                ('employee_id', models.CharField(default=None, max_length=20, null=True)),
                ('skype_username', models.CharField(default=None, max_length=50, null=True)),
                ('mobile_no', models.CharField(blank=True, max_length=10, null=True)),
                ('company_name', models.CharField(blank=True, default=None, max_length=50, null=True)),
                ('experience', models.CharField(blank=True, default=None, max_length=5, null=True)),
                ('status', models.CharField(blank=True, choices=[('active', 'ACTIVE'), ('less_active', 'LESS_ACTIVE'), ('independent', 'INDEPENDENT')], max_length=15, null=True)),
                ('assigned_date', models.DateField(blank=True, null=True)),
                ('current_location', models.CharField(blank=True, default=None, max_length=30, null=True)),
                ('resume', models.FileField(default=None, null=True, upload_to=consultant_app.models.get_attachment_file_path)),
                ('image', versatileimagefield.fields.VersatileImageField(blank=True, null=True, upload_to=consultant_app.models.get_attachment_file_path, verbose_name='Image')),
                ('image_ppoi', versatileimagefield.fields.PPOIField(default='0.5x0.5', editable=False, max_length=20)),
                ('log_out_time', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('supporter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='consultant', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Bookmyshow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(blank=True, max_length=500, null=True)),
                ('city_name', models.CharField(blank=True, max_length=500, null=True)),
                ('date_time', models.CharField(blank=True, max_length=500, null=True)),
                ('price_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={}, null=True)),
                ('venue', models.CharField(blank=True, max_length=500, null=True)),
                ('event_url', models.CharField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=1000)),
                ('comment_time', models.DateTimeField(default=datetime.datetime.now)),
            ],
        ),
        migrations.CreateModel(
            name='Eventshigh',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(blank=True, max_length=500, null=True)),
                ('city_name', models.CharField(blank=True, max_length=500, null=True)),
                ('date_time', models.CharField(blank=True, max_length=500, null=True)),
                ('price_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={}, null=True)),
                ('venue', models.CharField(blank=True, max_length=500, null=True)),
                ('event_url', models.CharField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True, upload_to=consultant_app.models.get_attachment_file_path)),
            ],
        ),
        migrations.CreateModel(
            name='Goeventz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(blank=True, max_length=500, null=True)),
                ('city_name', models.CharField(blank=True, max_length=500, null=True)),
                ('date_time', models.CharField(blank=True, max_length=500, null=True)),
                ('price_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={}, null=True)),
                ('venue', models.CharField(blank=True, max_length=500, null=True)),
                ('event_url', models.CharField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalProject',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=30)),
                ('description', models.CharField(blank=True, max_length=2000, null=True)),
                ('assigned_date', models.DateField(blank=True, null=True)),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('join_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('going_on', 'GOING_ON'), ('project_co', 'PROJECT_COMPLETED'), ('contract_c', 'CONTRACT_COMPLETED'), ('contract_e', 'CONTRACT_EXTENDED'), ('fired', 'FIRED'), ('resigned', 'RESIGNED')], default='pending', max_length=10)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('consultant', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical project',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalUser',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=10, null=True)),
                ('role', models.CharField(blank=True, choices=[('supporter', 'SUPPORTER'), ('consultant', 'CONSULTANT')], max_length=15)),
                ('designation', models.CharField(blank=True, max_length=225, null=True)),
                ('employee_id', models.CharField(default=None, max_length=20, null=True)),
                ('skype_username', models.CharField(default=None, max_length=50, null=True)),
                ('mobile_no', models.CharField(blank=True, max_length=10, null=True)),
                ('company_name', models.CharField(blank=True, default=None, max_length=50, null=True)),
                ('experience', models.CharField(blank=True, default=None, max_length=5, null=True)),
                ('status', models.CharField(blank=True, choices=[('active', 'ACTIVE'), ('less_active', 'LESS_ACTIVE'), ('independent', 'INDEPENDENT')], max_length=15, null=True)),
                ('assigned_date', models.DateField(blank=True, null=True)),
                ('current_location', models.CharField(blank=True, default=None, max_length=30, null=True)),
                ('resume', models.TextField(default=None, max_length=100, null=True)),
                ('image', models.TextField(blank=True, max_length=100, null=True, verbose_name='Image')),
                ('image_ppoi', versatileimagefield.fields.PPOIField(default='0.5x0.5', editable=False, max_length=20)),
                ('log_out_time', models.DateTimeField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('supporter', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='consultant_app.HistoricalUser')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical user',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='Insider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(blank=True, max_length=500, null=True)),
                ('city_name', models.CharField(blank=True, max_length=500, null=True)),
                ('date_time', models.CharField(blank=True, max_length=500, null=True)),
                ('price_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={}, null=True)),
                ('venue', models.CharField(blank=True, max_length=500, null=True)),
                ('event_url', models.CharField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Meraevents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(blank=True, max_length=500, null=True)),
                ('city_name', models.CharField(blank=True, max_length=500, null=True)),
                ('date_time', models.CharField(blank=True, max_length=500, null=True)),
                ('price_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={}, null=True)),
                ('venue', models.CharField(blank=True, max_length=500, null=True)),
                ('event_url', models.CharField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=225)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('unread', models.BooleanField(default=True)),
                ('type', models.CharField(max_length=225)),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='consultant_app.Comment')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30, unique=True)),
                ('description', models.CharField(blank=True, max_length=2000, null=True)),
                ('assigned_date', models.DateField(blank=True, null=True)),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('join_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('going_on', 'GOING_ON'), ('project_co', 'PROJECT_COMPLETED'), ('contract_c', 'CONTRACT_COMPLETED'), ('contract_e', 'CONTRACT_EXTENDED'), ('fired', 'FIRED'), ('resigned', 'RESIGNED')], default='pending', max_length=10)),
                ('consultant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SkillSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pointer', models.IntegerField()),
                ('supporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skillset', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Technology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('technology', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='To_do_list',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_do_list', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='skillset',
            name='technology',
            field=models.ForeignKey(max_length=30, on_delete=django.db.models.deletion.CASCADE, to='consultant_app.Technology'),
        ),
        migrations.AddField(
            model_name='project',
            name='technology',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='consultant_app.Technology'),
        ),
        migrations.AddField(
            model_name='notification',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='consultant_app.Project'),
        ),
        migrations.AddField(
            model_name='notification',
            name='recipient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notification',
            name='send_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Notification', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalproject',
            name='technology',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='consultant_app.Technology'),
        ),
        migrations.AddField(
            model_name='file',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='consultant_app.Project'),
        ),
        migrations.AddField(
            model_name='comment',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment', to='consultant_app.Project'),
        ),
        migrations.AddField(
            model_name='comment',
            name='supporter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment', to=settings.AUTH_USER_MODEL),
        ),
    ]
