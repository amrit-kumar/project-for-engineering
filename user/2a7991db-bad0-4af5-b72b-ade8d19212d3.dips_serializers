class SupporterDetailSerializer(serializers.ModelSerializer):
    consultant = ConsultantInfoSerializer(many=True)
    username = serializers.SerializerMethodField('getting_supporter')
    skillset=SkillSetSerializer(many=True)
    project_list = serializers.SerializerMethodField()

    def get_project_list(self, obj):
        data = Project.objects.filter(consultant__supporter=obj)
        serializers=ProjectSerializer(data ,many=True)
        return serializers.data

    def getting_supporter(self, obj):
        return obj.username

    def update(self, instance, validated_data):
        instance.gender = validated_data.get('gender', instance.gender)
        instance.role = validated_data.get('role', instance.role)
        instance.employee_id = validated_data.get('employee_id', instance.employee_id)
        instance.skype_username = validated_data.get('skype_username', instance.skype_username)
        instance.mobile_no = validated_data.get('mobile_no', instance.mobile_no)
        instance.company_name = validated_data.get('company_name', instance.company_name)
        instance.experience = validated_data.get('experience', instance.experience)
        instance.status = validated_data.get('status', instance.status)
        instance.assigned_date = validated_data.get('assigned_date', instance.assigned_date)
        instance.current_location = validated_data.get('current_location', instance.current_location)
        instance.resume = validated_data.get('resume', instance.resume)
        instance.supporter = validated_data.get('supporter', instance.supporter)
        # skillset = validated_data.get('skillset')
        skillset = validated_data.pop('skillset')

        # for skill in skillset:
        #     skill, created = SkillSet.objects.get_or_create(technolgy=skill['technology'], pointer=skill['pointer'])
        #     instance.skillset.add(skill)
        #     return instance


        for skillset in skillset:
            skillset= SkillSet.objects.get_or_create(name=skillset['name'])
            instance.ingredients.add(skillset)
        return instance
        # skillset = validated_data.get('skillset')
        # # for i in skillset:
        # skillset = skillset.pop('skillset')
        # for skill in skillset:
        #     instance.skillset_technology = skill.technology,
        #     instance.skillset_pointer = skill.pointer
        #     instance.save()



    class Meta:
        model = User
        fields = ('id', 'username','first_name','last_name','skype_username','email','employee_id','gender','role','designation','mobile_no','experience','is_superuser','assigned_date','skillset','consultant','project_list',)
        order_by= ('-assigned_date')
        depth = 1
 class SkillSetSerializer(serializers.ModelSerializer):

    technology = serializers.SerializerMethodField('get_tech')

    def get_tech(self,obj):
        return obj.technology.technology

    # def get_tech(self, obj):
